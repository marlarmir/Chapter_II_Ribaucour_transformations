##CHAPTER 2: RIBAUCOUR TRANSFORMATIONS
#Ribaucour related circles with same orientation
def RR_CIRCLES_SAME_OR(Cy1,Cy2,p1):
	n1=remLag(p1,Cy1)
	t=-(ipLag(remLag(Cy1,Cy2),remLag(Cy1,Cy2)))/(2*ipLag(remLag(Cy1,Cy2),n1))
	Cy3=Cy1+LagprodScal(t,n1)
	p2=(Cy3[1]/(Cy3[1]-Cy2[1]))*Cy2[0]-(Cy2[1]/(Cy3[1]-Cy2[1]))*Cy3[0]
	return Cy3,p2
#Space  curve  Ribaucour  related  into  spherical  curve
def RR_FROM_SPACE_CURVE_INTO_SPHERICAL_CURVE(x1,p1,S):
	result=[]
	result.append(p1)
	for i in range (0,len(x1),1):
		cir=rs.AddCircle(x1[i],x1[i+1],p1)
		int=Rhino.Geometry.Intersect.Intersection.CurveSphere(cir, S)
		if int[0]==p1:
			p1=int[1]
		else:
			p1=int[0]
		result.append(p1)
	return result
#Interpolation  between  two  discrete  curves
def RR_INTERPOLATION_TWO_DISCRETE_CURVES(x1,x2,p1,p2,S,p3):
	y1=RR_FROM_SPACE_CURVE_INTO_SPHERICAL_CURVE(x1,p1,S)
	y2=RR_FROM_SPACE_CURVE_INTO_SPHERICAL_CURVE(x2,p2,S)
	y3=[]
	y3.append(p3)
	for i in range (0,len(y1),1):
		cir1=rs.AddCircle(y1[i],y1[i+1],p3),cir2=rs.AddCircle(y2[i],y2[i+1],p3)
		int=Rhino.Geometry.Intersect.Intersection.CurveCurve(cir1, cir2)
		if int[0]==p3:
			p3=int[1]
		else:
			p3=int[0]
		y3.append(p3)
	return y1,y2,y3
